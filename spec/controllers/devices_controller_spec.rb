require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DevicesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Device. As you add validations to Device, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DevicesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all devices as @devices" do
      device = Device.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:devices)).to eq([device])
    end
  end

  describe "GET #show" do
    it "assigns the requested device as @device" do
      device = Device.create! valid_attributes
      get :show, params: {id: device.to_param}, session: valid_session
      expect(assigns(:device)).to eq(device)
    end
  end

  describe "GET #new" do
    it "assigns a new device as @device" do
      get :new, params: {}, session: valid_session
      expect(assigns(:device)).to be_a_new(Device)
    end
  end

  describe "GET #edit" do
    it "assigns the requested device as @device" do
      device = Device.create! valid_attributes
      get :edit, params: {id: device.to_param}, session: valid_session
      expect(assigns(:device)).to eq(device)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Device" do
        expect {
          post :create, params: {device: valid_attributes}, session: valid_session
        }.to change(Device, :count).by(1)
      end

      it "assigns a newly created device as @device" do
        post :create, params: {device: valid_attributes}, session: valid_session
        expect(assigns(:device)).to be_a(Device)
        expect(assigns(:device)).to be_persisted
      end

      it "redirects to the created device" do
        post :create, params: {device: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Device.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved device as @device" do
        post :create, params: {device: invalid_attributes}, session: valid_session
        expect(assigns(:device)).to be_a_new(Device)
      end

      it "re-renders the 'new' template" do
        post :create, params: {device: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested device" do
        device = Device.create! valid_attributes
        put :update, params: {id: device.to_param, device: new_attributes}, session: valid_session
        device.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested device as @device" do
        device = Device.create! valid_attributes
        put :update, params: {id: device.to_param, device: valid_attributes}, session: valid_session
        expect(assigns(:device)).to eq(device)
      end

      it "redirects to the device" do
        device = Device.create! valid_attributes
        put :update, params: {id: device.to_param, device: valid_attributes}, session: valid_session
        expect(response).to redirect_to(device)
      end
    end

    context "with invalid params" do
      it "assigns the device as @device" do
        device = Device.create! valid_attributes
        put :update, params: {id: device.to_param, device: invalid_attributes}, session: valid_session
        expect(assigns(:device)).to eq(device)
      end

      it "re-renders the 'edit' template" do
        device = Device.create! valid_attributes
        put :update, params: {id: device.to_param, device: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested device" do
      device = Device.create! valid_attributes
      expect {
        delete :destroy, params: {id: device.to_param}, session: valid_session
      }.to change(Device, :count).by(-1)
    end

    it "redirects to the devices list" do
      device = Device.create! valid_attributes
      delete :destroy, params: {id: device.to_param}, session: valid_session
      expect(response).to redirect_to(devices_url)
    end
  end



  #custom stuff

  before(:each) do
    DatabaseCleaner.clean_with(:truncation, reset_ids: true)
    @dev1 = Device.create(token: "5e593e1133fa842384e92789c612ae1e1f217793ca3b48e4b0f4f39912f61104",
                          latitude: 50,
                          longitude: -100,
                          radius: 20.0,
                          os: "ios")

    @dev2 = Device.create(token: "30d89b9620d59f88350af570e7349472d8e02e54367f41825918e054fde792ad",
                          latitude: 50,
                          longitude: -100,
                          radius: 20.0,
                          os: "ios")

    @dev3 = Device.create(token: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                          latitude: 25,
                          longitude: -100,
                          radius: 20.0,
                          os: "ios")

    @dev4 = Device.create(token: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
                          latitude: 75,
                          longitude: -100,
                          radius: 20.0,
                          os: "ios")

    @dev5 = Device.create(token: "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC",
                          latitude: 60,
                          longitude: -100,
                          radius: 20.0,
                          os: "ios")
  end

  context "valid device input" do
    it "should be able to register and receive response that it was successful" do
      post :create, params: {device: {token: "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD",
                                      latitude: 50,
                                      longitude: -100,
                                      radius: 20.0,
                                      os: "ios"}}
      # puts response.body

      # expect(response).to have_http_status(:created)
      # expect(assigns(:@dev1)).to be_a_new(Device)
    end
  end

end
